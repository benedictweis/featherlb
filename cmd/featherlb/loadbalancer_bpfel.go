// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadLoadbalancer returns the embedded CollectionSpec for loadbalancer.
func loadLoadbalancer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_LoadbalancerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load loadbalancer: %w", err)
	}

	return spec, err
}

// loadLoadbalancerObjects loads loadbalancer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*loadbalancerObjects
//	*loadbalancerPrograms
//	*loadbalancerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadLoadbalancerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadLoadbalancer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// loadbalancerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type loadbalancerSpecs struct {
	loadbalancerProgramSpecs
	loadbalancerMapSpecs
	loadbalancerVariableSpecs
}

// loadbalancerProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type loadbalancerProgramSpecs struct {
	CountPackets *ebpf.ProgramSpec `ebpf:"count_packets"`
}

// loadbalancerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type loadbalancerMapSpecs struct {
	PktCount *ebpf.MapSpec `ebpf:"pkt_count"`
}

// loadbalancerVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type loadbalancerVariableSpecs struct {
}

// loadbalancerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadLoadbalancerObjects or ebpf.CollectionSpec.LoadAndAssign.
type loadbalancerObjects struct {
	loadbalancerPrograms
	loadbalancerMaps
	loadbalancerVariables
}

func (o *loadbalancerObjects) Close() error {
	return _LoadbalancerClose(
		&o.loadbalancerPrograms,
		&o.loadbalancerMaps,
	)
}

// loadbalancerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadLoadbalancerObjects or ebpf.CollectionSpec.LoadAndAssign.
type loadbalancerMaps struct {
	PktCount *ebpf.Map `ebpf:"pkt_count"`
}

func (m *loadbalancerMaps) Close() error {
	return _LoadbalancerClose(
		m.PktCount,
	)
}

// loadbalancerVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadLoadbalancerObjects or ebpf.CollectionSpec.LoadAndAssign.
type loadbalancerVariables struct {
}

// loadbalancerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadLoadbalancerObjects or ebpf.CollectionSpec.LoadAndAssign.
type loadbalancerPrograms struct {
	CountPackets *ebpf.Program `ebpf:"count_packets"`
}

func (p *loadbalancerPrograms) Close() error {
	return _LoadbalancerClose(
		p.CountPackets,
	)
}

func _LoadbalancerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed loadbalancer_bpfel.o
var _LoadbalancerBytes []byte
